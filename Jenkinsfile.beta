#!/usr/bin/env groovy
import groovy.transform.Field

@Field 
def image_name = "gcr.io/plaidcloud-build/docs"

@Field
def image_label = ""

@Field
def branch = ""

podTemplate(label: 'docs',
  containers: [
    containerTemplate(name: 'docker', image: 'docker:18.09.9', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'kubectl', image: "lachlanevenson/k8s-kubectl:v1.15.9", ttyEnabled: true, command: 'cat')
  ],
  serviceAccount: 'jenkins'
)
{
  node(label: 'docs') {
    properties([
      parameters([
        booleanParam(name: 'no_cache', defaultValue: false, description: 'Adds --no-cache flag to docker build command(s).')
      ])
    ])
    container('docker') {
      withCredentials([string(credentialsId: 'docker-server-ip', variable: 'host')]) {
        docker.withServer("$host", "docker-server") {
          withCredentials([dockerCert(credentialsId: 'docker-server', variable: "DOCKER_CERT_PATH")]) {
            docker.withRegistry('https://gcr.io', 'gcr:plaidcloud-build') {
              dir('docs') {
                scm_map = checkout scm
              }

              // When building from a PR event, we want to read the branch name from the CHANGE_BRANCH binding. This binding does not exist on branch events.
              branch = env.CHANGE_BRANCH ?: scm_map.GIT_BRANCH.minus(~/^origin\//)

              docker_args = ''

              // Add any extra docker build arguments here.
              if (params.no_cache) {
                docker_args += '--no-cache'
              }

              stage('Build Image') {
                dir('src') {
                  git url: 'https://github.com/PlaidCloud/plaid.git', credentialsId: 'plaid-machine-user'
                }

                image_label = "${branch}-${BUILD_NUMBER}"
                image = docker.build("${image_name}:${image_label}", "--pull ${docker_args} -f docs/Dockerfile .")
              }

              stage('Publish to DockerHub') {
                image.push()
              }
            }
          }
        }
      }
    }
    container('kubectl') {
      stage("Deploy to Kubernetes") {
        withCredentials([file(credentialsId: 'prod-kube-config', variable: 'KUBECONFIG')]) {
          sh "kubectl -n beta set image deployment/beta-docs docs=${image_name}:${image_label} --record"
        }
      }
    }
  }
}
